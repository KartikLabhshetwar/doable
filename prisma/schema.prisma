// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id         String   @id @default(cuid())
  name       String
  key        String   @unique // 3-letter team identifier (e.g., "ENG", "DES")
  groqApiKey String? // Optional Groq API key for BYOK feature
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  projects          Project[]
  issues            Issue[]
  workflowStates    WorkflowState[]
  labels            Label[]
  members           TeamMember[]
  invitations       Invitation[]
  chatConversations ChatConversation[]

  @@map("teams")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  key         String // 3-letter project identifier (e.g., "WEB", "API")
  color       String   @default("#6366f1") // Hex color
  icon        String? // Icon name or emoji
  status      String   @default("active") // active, completed, canceled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  leadId String? // Clerk user ID
  lead   String? // User display name

  issues  Issue[]
  members ProjectMember[]

  @@unique([teamId, key])
  @@map("projects")
}

model WorkflowState {
  id        String   @id @default(cuid())
  name      String
  type      String // backlog, unstarted, started, completed, canceled
  color     String   @default("#64748b") // Hex color
  position  Int      @default(0) // Order in workflow
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  issues Issue[]

  @@unique([teamId, name])
  @@map("workflow_states")
}

model Label {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#64748b") // Hex color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  issues IssueLabel[]

  @@unique([teamId, name])
  @@map("labels")
}

model Issue {
  id          String    @id @default(cuid())
  title       String
  description String?
  number      Int // Sequential number per team (e.g., 123)
  priority    String    @default("none") // none, low, medium, high, urgent
  estimate    Int? // Story points or hours
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Relations
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  workflowStateId String
  workflowState   WorkflowState @relation(fields: [workflowStateId], references: [id])

  assigneeId String? // Clerk user ID
  assignee   String? // User display name

  creatorId String // Clerk user ID
  creator   String // User display name

  comments Comment[]
  labels   IssueLabel[]

  @@unique([teamId, number])
  @@map("issues")
}

model IssueLabel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  labelId String
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([issueId, labelId])
  @@map("issue_labels")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  userId String // Clerk user ID
  user   String // User display name

  @@map("comments")
}

model TeamMember {
  id        String   @id @default(cuid())
  role      String   @default("developer") // developer, admin, viewer
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  userId    String // Clerk user ID
  userEmail String
  userName  String

  @@unique([teamId, userId])
  @@map("team_members")
}

model ProjectMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId    String // Clerk user ID
  userEmail String
  userName  String

  @@unique([projectId, userId])
  @@map("project_members")
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  role      String   @default("developer") // developer, admin, viewer
  status    String   @default("pending") // pending, accepted, rejected
  invitedBy String // Clerk user ID
  createdAt DateTime @default(now())
  expiresAt DateTime
  // Relations
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@map("invitations")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model ChatConversation {
  id        String        @id @default(cuid())
  teamId    String
  team      Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String // Better Auth user ID
  title     String? // Auto-generated from first message
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]

  @@map("chat_conversations")
}

model ChatMessage {
  id             String           @id @default(cuid())
  conversationId String
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           String // user, assistant, tool
  content        String           @db.Text
  toolCalls      Json? // Store tool call data
  createdAt      DateTime         @default(now())

  @@map("chat_messages")
}
